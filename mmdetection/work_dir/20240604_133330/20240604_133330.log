2024/06/04 13:33:31 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1784868038
    GPU 0: NVIDIA GeForce RTX 3070
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.3.0+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.18.0+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1784868038
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/06/04 13:33:31 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=True)
backend_args = None
classes = ('tooth', )
data_root = '/home/dmsai2/mmdetection/data/tooth/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
            loss_cls=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
            num_classes=1,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead'),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='StandardRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        max_epochs=300,
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=False,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=-1,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000),
        type='EpochBasedTrainLoop',
        val_interval=1),
    type='FasterRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='/home/dmsai2/mmdetection/data/tooth/annotations/val.json',
        backend_args=None,
        data_prefix=dict(img='/home/dmsai2/mmdetection/data/tooth/val/'),
        metainfo=dict(classes=('tooth', )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                224,
                224,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='/home/dmsai2/mmdetection/data/tooth/annotations/val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        224,
        224,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=12, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        ann_file='/home/dmsai2/mmdetection/data/tooth/annotations/train.json',
        backend_args=None,
        data_prefix=dict(img='/home/dmsai2/mmdetection/data/tooth/train/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        metainfo=dict(classes=('tooth', )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                224,
                224,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(cutout_shape=(
                32,
                32,
            ), n_holes=5, type='CutOut'),
            dict(type='RandomAffine'),
            dict(prob=0.5, type='Rotate'),
            dict(prob=0.5, type='TranslateX'),
            dict(prob=0.5, type='TranslateY'),
            dict(prob=0.5, type='Brightness'),
            dict(prob=0.5, type='Contrast'),
            dict(prob=0.3, type='Solarize'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        224,
        224,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(cutout_shape=(
        32,
        32,
    ), n_holes=5, type='CutOut'),
    dict(type='RandomAffine'),
    dict(prob=0.5, type='Rotate'),
    dict(prob=0.5, type='TranslateX'),
    dict(prob=0.5, type='TranslateY'),
    dict(prob=0.5, type='Brightness'),
    dict(prob=0.5, type='Contrast'),
    dict(prob=0.3, type='Solarize'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='/home/dmsai2/mmdetection/data/tooth/annotations/val.json',
        backend_args=None,
        data_prefix=dict(img='/home/dmsai2/mmdetection/data/tooth/val/'),
        metainfo=dict(classes=('tooth', )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                224,
                224,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='/home/dmsai2/mmdetection/data/tooth/annotations/val.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
    dict(type='TensorboardVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
        dict(type='TensorboardVisBackend'),
    ])
work_dir = '/home/dmsai2/mmdetection/work_dir/'

2024/06/04 13:33:33 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/06/04 13:33:33 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/06/04 13:33:34 - mmengine - INFO - LR is set based on batch size of 16 and the current batch size is 2. Scaling the original LR by 0.125.
2024/06/04 13:33:34 - mmengine - INFO - load model from: torchvision://resnet50
2024/06/04 13:33:34 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2024/06/04 13:33:34 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FasterRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2024/06/04 13:33:34 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/06/04 13:33:34 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/06/04 13:33:34 - mmengine - INFO - Checkpoints will be saved to /home/dmsai2/mmdetection/work_dir.
2024/06/04 13:33:38 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:33:38 - mmengine - INFO - Epoch(train)  [1][34/34]  lr: 2.5000e-03  eta: 0:00:42  time: 0.1136  data_time: 0.0048  memory: 681  loss: nan  loss_rpn_cls: 0.5085  loss_rpn_bbox: 0.0878  loss_cls: 0.3500  acc: 80.0781  loss_bbox: nan
2024/06/04 13:33:38 - mmengine - INFO - Saving checkpoint at 1 epochs
2024/06/04 13:33:38 - mmengine - WARNING - `save_param_scheduler` is True but `self.param_schedulers` is None, so skip saving parameter schedulers
2024/06/04 13:33:39 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:33:40 - mmengine - INFO - bbox_mAP_copypaste: 0.008 0.035 0.000 0.002 0.035 0.005
2024/06/04 13:33:40 - mmengine - INFO - Epoch(val) [1][17/17]    coco/bbox_mAP: 0.0080  coco/bbox_mAP_50: 0.0350  coco/bbox_mAP_75: 0.0000  coco/bbox_mAP_s: 0.0020  coco/bbox_mAP_m: 0.0350  coco/bbox_mAP_l: 0.0050  data_time: 0.0052  time: 0.0227
2024/06/04 13:33:42 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:33:42 - mmengine - INFO - Epoch(train)  [2][34/34]  lr: 2.5000e-03  eta: 0:00:29  time: 0.0631  data_time: 0.0022  memory: 680  loss: nan  loss_rpn_cls: 0.3178  loss_rpn_bbox: 0.0855  loss_cls: 0.3633  acc: 75.7812  loss_bbox: nan
2024/06/04 13:33:42 - mmengine - INFO - Saving checkpoint at 2 epochs
2024/06/04 13:33:43 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:33:43 - mmengine - INFO - bbox_mAP_copypaste: 0.027 0.123 0.001 0.000 0.060 0.003
2024/06/04 13:33:43 - mmengine - INFO - Epoch(val) [2][17/17]    coco/bbox_mAP: 0.0270  coco/bbox_mAP_50: 0.1230  coco/bbox_mAP_75: 0.0010  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.0600  coco/bbox_mAP_l: 0.0030  data_time: 0.0012  time: 0.0175
2024/06/04 13:33:45 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:33:45 - mmengine - INFO - Epoch(train)  [3][34/34]  lr: 2.5000e-03  eta: 0:00:23  time: 0.0581  data_time: 0.0022  memory: 681  loss: nan  loss_rpn_cls: 0.2734  loss_rpn_bbox: 0.0844  loss_cls: 0.3241  acc: 99.4141  loss_bbox: nan
2024/06/04 13:33:45 - mmengine - INFO - Saving checkpoint at 3 epochs
2024/06/04 13:33:46 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:33:47 - mmengine - INFO - bbox_mAP_copypaste: 0.042 0.165 0.003 0.001 0.101 0.008
2024/06/04 13:33:47 - mmengine - INFO - Epoch(val) [3][17/17]    coco/bbox_mAP: 0.0420  coco/bbox_mAP_50: 0.1650  coco/bbox_mAP_75: 0.0030  coco/bbox_mAP_s: 0.0010  coco/bbox_mAP_m: 0.1010  coco/bbox_mAP_l: 0.0080  data_time: 0.0012  time: 0.0173
2024/06/04 13:33:49 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:33:49 - mmengine - INFO - Epoch(train)  [4][34/34]  lr: 2.5000e-03  eta: 0:00:19  time: 0.0575  data_time: 0.0023  memory: 682  loss: nan  loss_rpn_cls: 0.2383  loss_rpn_bbox: 0.0785  loss_cls: 0.2968  acc: 99.6094  loss_bbox: nan
2024/06/04 13:33:49 - mmengine - INFO - Saving checkpoint at 4 epochs
2024/06/04 13:33:50 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:33:50 - mmengine - INFO - bbox_mAP_copypaste: 0.051 0.181 0.007 0.000 0.128 0.005
2024/06/04 13:33:50 - mmengine - INFO - Epoch(val) [4][17/17]    coco/bbox_mAP: 0.0510  coco/bbox_mAP_50: 0.1810  coco/bbox_mAP_75: 0.0070  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.1280  coco/bbox_mAP_l: 0.0050  data_time: 0.0013  time: 0.0172
2024/06/04 13:33:52 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:33:52 - mmengine - INFO - Epoch(train)  [5][34/34]  lr: 2.5000e-03  eta: 0:00:16  time: 0.0579  data_time: 0.0023  memory: 682  loss: nan  loss_rpn_cls: 0.2059  loss_rpn_bbox: 0.0643  loss_cls: 0.2773  acc: 97.8516  loss_bbox: nan
2024/06/04 13:33:52 - mmengine - INFO - Saving checkpoint at 5 epochs
2024/06/04 13:33:53 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:33:53 - mmengine - INFO - bbox_mAP_copypaste: 0.131 0.384 0.035 0.001 0.252 0.000
2024/06/04 13:33:53 - mmengine - INFO - Epoch(val) [5][17/17]    coco/bbox_mAP: 0.1310  coco/bbox_mAP_50: 0.3840  coco/bbox_mAP_75: 0.0350  coco/bbox_mAP_s: 0.0010  coco/bbox_mAP_m: 0.2520  coco/bbox_mAP_l: 0.0000  data_time: 0.0012  time: 0.0173
2024/06/04 13:33:55 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:33:55 - mmengine - INFO - Epoch(train)  [6][34/34]  lr: 2.5000e-03  eta: 0:00:13  time: 0.0578  data_time: 0.0022  memory: 682  loss: nan  loss_rpn_cls: 0.2077  loss_rpn_bbox: 0.0674  loss_cls: 0.2857  acc: 85.3516  loss_bbox: nan
2024/06/04 13:33:55 - mmengine - INFO - Saving checkpoint at 6 epochs
2024/06/04 13:33:57 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:33:57 - mmengine - INFO - bbox_mAP_copypaste: 0.056 0.207 0.005 0.001 0.143 0.000
2024/06/04 13:33:57 - mmengine - INFO - Epoch(val) [6][17/17]    coco/bbox_mAP: 0.0560  coco/bbox_mAP_50: 0.2070  coco/bbox_mAP_75: 0.0050  coco/bbox_mAP_s: 0.0010  coco/bbox_mAP_m: 0.1430  coco/bbox_mAP_l: 0.0000  data_time: 0.0012  time: 0.0180
2024/06/04 13:33:59 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:33:59 - mmengine - INFO - Epoch(train)  [7][34/34]  lr: 2.5000e-03  eta: 0:00:11  time: 0.0573  data_time: 0.0022  memory: 682  loss: nan  loss_rpn_cls: 0.2019  loss_rpn_bbox: 0.0735  loss_cls: 0.3040  acc: 85.3516  loss_bbox: nan
2024/06/04 13:33:59 - mmengine - INFO - Saving checkpoint at 7 epochs
2024/06/04 13:34:00 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:34:00 - mmengine - INFO - bbox_mAP_copypaste: 0.135 0.414 0.027 0.004 0.275 0.000
2024/06/04 13:34:00 - mmengine - INFO - Epoch(val) [7][17/17]    coco/bbox_mAP: 0.1350  coco/bbox_mAP_50: 0.4140  coco/bbox_mAP_75: 0.0270  coco/bbox_mAP_s: 0.0040  coco/bbox_mAP_m: 0.2750  coco/bbox_mAP_l: 0.0000  data_time: 0.0013  time: 0.0183
2024/06/04 13:34:02 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:34:02 - mmengine - INFO - Epoch(train)  [8][34/34]  lr: 2.5000e-03  eta: 0:00:08  time: 0.0587  data_time: 0.0023  memory: 682  loss: nan  loss_rpn_cls: 0.1969  loss_rpn_bbox: 0.0716  loss_cls: 0.3052  acc: 97.4609  loss_bbox: nan
2024/06/04 13:34:02 - mmengine - INFO - Saving checkpoint at 8 epochs
2024/06/04 13:34:04 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:34:04 - mmengine - INFO - bbox_mAP_copypaste: 0.161 0.486 0.025 0.003 0.293 0.005
2024/06/04 13:34:04 - mmengine - INFO - Epoch(val) [8][17/17]    coco/bbox_mAP: 0.1610  coco/bbox_mAP_50: 0.4860  coco/bbox_mAP_75: 0.0250  coco/bbox_mAP_s: 0.0030  coco/bbox_mAP_m: 0.2930  coco/bbox_mAP_l: 0.0050  data_time: 0.0012  time: 0.0175
2024/06/04 13:34:06 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:34:06 - mmengine - INFO - Epoch(train)  [9][34/34]  lr: 2.5000e-03  eta: 0:00:06  time: 0.0588  data_time: 0.0023  memory: 682  loss: nan  loss_rpn_cls: 0.1773  loss_rpn_bbox: 0.0640  loss_cls: 0.2684  acc: 97.8516  loss_bbox: nan
2024/06/04 13:34:06 - mmengine - INFO - Saving checkpoint at 9 epochs
2024/06/04 13:34:07 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:34:07 - mmengine - INFO - bbox_mAP_copypaste: 0.174 0.508 0.029 0.008 0.313 0.000
2024/06/04 13:34:07 - mmengine - INFO - Epoch(val) [9][17/17]    coco/bbox_mAP: 0.1740  coco/bbox_mAP_50: 0.5080  coco/bbox_mAP_75: 0.0290  coco/bbox_mAP_s: 0.0080  coco/bbox_mAP_m: 0.3130  coco/bbox_mAP_l: 0.0000  data_time: 0.0013  time: 0.0178
2024/06/04 13:34:09 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:34:09 - mmengine - INFO - Epoch(train) [10][34/34]  lr: 2.5000e-03  eta: 0:00:04  time: 0.0581  data_time: 0.0023  memory: 682  loss: nan  loss_rpn_cls: 0.1513  loss_rpn_bbox: 0.0648  loss_cls: 0.2699  acc: 80.2734  loss_bbox: nan
2024/06/04 13:34:09 - mmengine - INFO - Saving checkpoint at 10 epochs
2024/06/04 13:34:10 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:34:10 - mmengine - INFO - bbox_mAP_copypaste: 0.193 0.504 0.066 0.007 0.346 0.016
2024/06/04 13:34:10 - mmengine - INFO - Epoch(val) [10][17/17]    coco/bbox_mAP: 0.1930  coco/bbox_mAP_50: 0.5040  coco/bbox_mAP_75: 0.0660  coco/bbox_mAP_s: 0.0070  coco/bbox_mAP_m: 0.3460  coco/bbox_mAP_l: 0.0160  data_time: 0.0012  time: 0.0179
2024/06/04 13:34:12 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:34:12 - mmengine - INFO - Epoch(train) [11][34/34]  lr: 2.5000e-03  eta: 0:00:02  time: 0.0579  data_time: 0.0023  memory: 682  loss: nan  loss_rpn_cls: 0.1601  loss_rpn_bbox: 0.0691  loss_cls: 0.2692  acc: 84.7656  loss_bbox: nan
2024/06/04 13:34:12 - mmengine - INFO - Saving checkpoint at 11 epochs
2024/06/04 13:34:14 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:34:14 - mmengine - INFO - bbox_mAP_copypaste: 0.155 0.516 0.018 0.030 0.265 0.015
2024/06/04 13:34:14 - mmengine - INFO - Epoch(val) [11][17/17]    coco/bbox_mAP: 0.1550  coco/bbox_mAP_50: 0.5160  coco/bbox_mAP_75: 0.0180  coco/bbox_mAP_s: 0.0300  coco/bbox_mAP_m: 0.2650  coco/bbox_mAP_l: 0.0150  data_time: 0.0013  time: 0.0181
2024/06/04 13:34:16 - mmengine - INFO - Exp name: faster-rcnn_r50_fpn_1x_coco_20240604_133330
2024/06/04 13:34:16 - mmengine - INFO - Epoch(train) [12][34/34]  lr: 2.5000e-03  eta: 0:00:00  time: 0.0575  data_time: 0.0022  memory: 682  loss: nan  loss_rpn_cls: 0.1448  loss_rpn_bbox: 0.0632  loss_cls: 0.2603  acc: 96.4844  loss_bbox: nan
2024/06/04 13:34:16 - mmengine - INFO - Saving checkpoint at 12 epochs
2024/06/04 13:34:17 - mmengine - INFO - Evaluating bbox...
2024/06/04 13:34:17 - mmengine - INFO - bbox_mAP_copypaste: 0.230 0.584 0.078 0.038 0.379 0.008
2024/06/04 13:34:17 - mmengine - INFO - Epoch(val) [12][17/17]    coco/bbox_mAP: 0.2300  coco/bbox_mAP_50: 0.5840  coco/bbox_mAP_75: 0.0780  coco/bbox_mAP_s: 0.0380  coco/bbox_mAP_m: 0.3790  coco/bbox_mAP_l: 0.0080  data_time: 0.0013  time: 0.0174
